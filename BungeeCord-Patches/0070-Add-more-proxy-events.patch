From a53597677e153d70c73f06647e9b3add97e2d8fe Mon Sep 17 00:00:00 2001
From: Block_Mrlimr267 <113236317+erha134@users.noreply.github.com>
Date: Tue, 30 Apr 2024 18:21:13 +0800
Subject: [PATCH] Add more proxy events


diff --git a/api/src/main/java/xyz/tcbuildmc/tubecord/event/ProxyStartEvent.java b/api/src/main/java/xyz/tcbuildmc/tubecord/event/ProxyStartEvent.java
new file mode 100644
index 00000000..7d8ca7fc
--- /dev/null
+++ b/api/src/main/java/xyz/tcbuildmc/tubecord/event/ProxyStartEvent.java
@@ -0,0 +1,29 @@
+package xyz.tcbuildmc.tubecord.event;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.ToString;
+import net.md_5.bungee.api.plugin.Event;
+
+@Data
+@ToString(callSuper = false)
+@EqualsAndHashCode(callSuper = false)
+public class ProxyStartEvent extends Event {
+    private final EventState state;
+    private final boolean success;
+
+    public ProxyStartEvent(EventState state, boolean success) {
+        super();
+        this.state = state;
+        this.success = success;
+    }
+
+    public ProxyStartEvent(EventState state) {
+        this(state, true);
+    }
+
+    public enum EventState {
+        SERVER_LISTENER,
+        QUERY_LISTENER
+    }
+}
diff --git a/api/src/main/java/xyz/tcbuildmc/tubecord/event/ProxyStopEvent.java b/api/src/main/java/xyz/tcbuildmc/tubecord/event/ProxyStopEvent.java
new file mode 100644
index 00000000..a2d6153e
--- /dev/null
+++ b/api/src/main/java/xyz/tcbuildmc/tubecord/event/ProxyStopEvent.java
@@ -0,0 +1,32 @@
+package xyz.tcbuildmc.tubecord.event;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.ToString;
+import net.md_5.bungee.api.plugin.Event;
+
+/**
+ * Call when proxy server cancelled. (Before plugins disabled)
+ */
+@Data
+@ToString(callSuper = false)
+@EqualsAndHashCode(callSuper = false)
+public class ProxyStopEvent extends Event {
+    private final EventState state;
+    private final boolean success;
+
+    public ProxyStopEvent(EventState state, boolean success) {
+        super();
+        this.state = state;
+        this.success = success;
+    }
+
+    public ProxyStopEvent(EventState state) {
+        this(state, true);
+    }
+
+    public enum EventState {
+        SERVER_LISTENER,
+        SERVER_PROCESS
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 9f85cf66..9743d32e 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -23,7 +23,6 @@ import io.netty.util.ResourceLeakDetector;
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
-import java.io.PrintStream;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.nio.charset.StandardCharsets;
@@ -97,6 +96,8 @@ import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
 import net.md_5.bungee.util.CaseInsensitiveMap;
+import xyz.tcbuildmc.tubecord.event.ProxyStartEvent;
+import xyz.tcbuildmc.tubecord.event.ProxyStopEvent;
 
 /**
  * Main BungeeCord proxy class.
@@ -350,6 +351,7 @@ public class BungeeCord extends ProxyServer
                 @Override
                 public void operationComplete(ChannelFuture future) throws Exception
                 {
+                    getPluginManager().callEvent( new ProxyStartEvent( ProxyStartEvent.EventState.SERVER_LISTENER, future.isSuccess() )); // TubeCord - Add more proxy events
                     if ( future.isSuccess() )
                     {
                         listeners.add( future.channel() );
@@ -378,6 +380,7 @@ public class BungeeCord extends ProxyServer
                     @Override
                     public void operationComplete(ChannelFuture future) throws Exception
                     {
+                        getPluginManager().callEvent( new ProxyStartEvent( ProxyStartEvent.EventState.QUERY_LISTENER, future.isSuccess() )); // TubeCord - Add more proxy events
                         if ( future.isSuccess() )
                         {
                             listeners.add( future.channel() );
@@ -400,9 +403,11 @@ public class BungeeCord extends ProxyServer
             getLogger().log( Level.INFO, "Closing listener {0}", listener );
             try
             {
+                getPluginManager().callEvent( new ProxyStopEvent( ProxyStopEvent.EventState.SERVER_LISTENER, true ) ); // TubeCord - Add more proxy events
                 listener.close().syncUninterruptibly();
             } catch ( ChannelException ex )
             {
+                getPluginManager().callEvent( new ProxyStopEvent( ProxyStopEvent.EventState.SERVER_LISTENER , false ) ); // TubeCord - Add more proxy events
                 getLogger().severe( "Could not close listen thread" );
             }
         }
@@ -418,6 +423,7 @@ public class BungeeCord extends ProxyServer
     @Override
     public void stop(final String reason)
     {
+        getPluginManager().callEvent( new ProxyStopEvent( ProxyStopEvent.EventState.SERVER_PROCESS ) ); // TubeCord - Add more proxy events
         new Thread( "Shutdown Thread" )
         {
             @Override
-- 
2.34.1

